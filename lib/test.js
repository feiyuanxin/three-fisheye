'use strict';
var _PowerAssertRecorder1 = function () {
    function PowerAssertRecorder() {
        this.captured = [];
    }
    PowerAssertRecorder.prototype._capt = function _capt(value, espath) {
        this.captured.push({
            value: value,
            espath: espath
        });
        return value;
    };
    PowerAssertRecorder.prototype._expr = function _expr(value, source) {
        var capturedValues = this.captured;
        this.captured = [];
        return {
            powerAssertContext: {
                value: value,
                events: capturedValues
            },
            source: source
        };
    };
    return PowerAssertRecorder;
}();
var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator['throw'](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
            label: 0,
            sent: function () {
                if (t[0] & 1)
                    throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        }, f, y, t, g;
    return g = {
        next: verb(0),
        'throw': verb(1),
        'return': verb(2)
    }, typeof Symbol === 'function' && (g[Symbol.iterator] = function () {
        return this;
    }), g;
    function verb(n) {
        return function (v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f)
            throw new TypeError('Generator is already executing.');
        while (_)
            try {
                if (f = 1, y && (t = y[op[0] & 2 ? 'return' : op[0] ? 'throw' : 'next']) && !(t = t.call(y, op[1])).done)
                    return t;
                if (y = 0, t)
                    op = [
                        0,
                        t.value
                    ];
                switch (op[0]) {
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2])
                        _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [
                    6,
                    e
                ];
                y = 0;
            } finally {
                f = t = 0;
            }
        if (op[0] & 5)
            throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var _this = this;
Object.defineProperty(exports, '__esModule', { value: true });
var _1 = require('./');
var dat = require('dat-gui');
var QUnit = require('qunitjs');
var empower = require('empower');
var formatter = require('power-assert-formatter');
var qunitTap = require('qunit-tap');
QUnit.config.autostart = true;
empower(QUnit.assert, formatter(), { destructive: true });
qunitTap(QUnit, function () {
    console.log.apply(console, arguments);
}, { showSourceOnFailure: false });
QUnit.module('Fisheye');
QUnit.test('mercator2Sphere, sphere2Mercator', function (assert) {
    return __awaiter(_this, void 0, void 0, function () {
        var x, y, _a, a, b, _b, _x, _y;
        return __generator(this, function (_c) {
            var _rec1 = new _PowerAssertRecorder1();
            var _rec2 = new _PowerAssertRecorder1();
            for (x = 0; x <= 1; x += 0.01) {
                for (y = 0; y <= 1; y += 0.01) {
                    _a = _1.mercator2Sphere(x, y), a = _a[0], b = _a[1];
                    _b = _1.sphere2Mercator(a, b), _x = _b[0], _y = _b[1];
                    assert.ok(_rec1._expr(_rec1._capt(_rec1._capt(_rec1._capt(_rec1._capt(x, 'arguments/0/left/left/left') - 1e-8, 'arguments/0/left/left') <= _rec1._capt(_x, 'arguments/0/left/right'), 'arguments/0/left') && _rec1._capt(_rec1._capt(_x, 'arguments/0/right/left') <= _rec1._capt(_rec1._capt(x, 'arguments/0/right/right/left') + 1e-8, 'arguments/0/right/right'), 'arguments/0/right'), 'arguments/0'), {
                        content: 'assert.ok(x - 0.00000001 <= _x && _x <= x + 0.00000001)',
                        filepath: 'lib/test.js',
                        line: 56
                    }));
                    assert.ok(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(_rec2._capt(y, 'arguments/0/left/left/left') - 1e-8, 'arguments/0/left/left') <= _rec2._capt(_y, 'arguments/0/left/right'), 'arguments/0/left') && _rec2._capt(_rec2._capt(_y, 'arguments/0/right/left') <= _rec2._capt(_rec2._capt(y, 'arguments/0/right/right/left') + 1e-8, 'arguments/0/right/right'), 'arguments/0/right'), 'arguments/0'), {
                        content: 'assert.ok(y - 0.00000001 <= _y && _y <= y + 0.00000001)',
                        filepath: 'lib/test.js',
                        line: 57
                    }));
                }
            }
            return [2];
        });
    });
});
QUnit.test('Fisheye2Perspective', function (assert) {
    return __awaiter(_this, void 0, void 0, function () {
        var stream, url, video, cam, dragging, gui, width, tid;
        return __generator(this, function (_a) {
            switch (_a.label) {
            case 0:
                return [
                    4,
                    navigator.mediaDevices.getUserMedia({
                        audio: true,
                        video: {
                            mandatory: {
                                minFrameRate: 1,
                                maxFrameRate: 5,
                                minWidth: 2592,
                                minHeight: 1944
                            }
                        }
                    })
                ];
            case 1:
                stream = _a.sent();
                url = URL.createObjectURL(stream);
                video = document.createElement('video');
                video.src = url;
                return [
                    4,
                    new Promise(function (resolve, reject) {
                        video.addEventListener('loadeddata', resolve, { once: true });
                        video.addEventListener('error', reject, { once: true });
                    })
                ];
            case 2:
                _a.sent();
                video.autoplay = true;
                cam = new _1.Fisheye2Perspective();
                cam.src = video;
                cam.canvasSize = {
                    width: 600,
                    height: 400
                };
                cam.cameraPose = {
                    pitch: Math.PI / 4,
                    yaw: 0
                };
                cam.zoom = 1 / 3;
                cam.fisheyeRegion = {
                    centerX: 1259,
                    centerY: 887,
                    radius: 879
                };
                dragging = false;
                cam.canvas.addEventListener('mousemove', function (ev) {
                    if (dragging) {
                        cam.drag('move', ev.offsetX, ev.offsetY);
                    }
                });
                cam.canvas.addEventListener('mousedown', function (ev) {
                    dragging = true;
                    cam.drag('start', ev.offsetX, ev.offsetY);
                });
                cam.canvas.addEventListener('mouseup', function (ev) {
                    dragging = false;
                });
                cam.canvas.addEventListener('mouseleave', function (ev) {
                    dragging = false;
                });
                gui = new dat.GUI();
                width = cam.texctx.canvas.width;
                gui.add(video, 'currentTime', 0, video.duration);
                gui.add(cam, 'zoom', 0.01, 2).step(0.01);
                gui.add(cam, 'centerX', -width, width);
                gui.add(cam, 'centerY', -width, width);
                gui.add(cam, 'radius', 1, width / 2);
                gui.add(cam, 'pitch', 0, Math.PI / 2);
                gui.add(cam, 'yaw', -Math.PI, Math.PI);
                gui.close();
                document.body.appendChild(cam.canvas);
                tid = setInterval(function () {
                    cam.render();
                    gui.__controllers.forEach(function (ctrl) {
                        ctrl.updateDisplay();
                    });
                }, 30);
                video.play();
                return [
                    4,
                    sleep(5 * 60 * 1000)
                ];
            case 3:
                _a.sent();
                clearTimeout(tid);
                cam.destructor();
                video.pause();
                URL.revokeObjectURL(url);
                stream.getTracks().forEach(function (a) {
                    a.stop();
                });
                assert.ok(true);
                return [2];
            }
        });
    });
});
QUnit.test('Fisheye2Equirectangular', function (assert) {
    return __awaiter(_this, void 0, void 0, function () {
        var video, cam;
        return __generator(this, function (_a) {
            switch (_a.label) {
            case 0:
                video = document.createElement('video');
                video.src = './ec2e5847-b502-484c-b898-b8e2955f4545.webm';
                return [
                    4,
                    new Promise(function (resolve, reject) {
                        video.addEventListener('loadeddata', resolve, { once: true });
                        video.addEventListener('error', reject, { once: true });
                    })
                ];
            case 1:
                _a.sent();
                cam = new _1.Fisheye2Equirectangular();
                window['cam'] = cam;
                cam.src = video;
                cam.fisheyeRegion = {
                    centerX: 1259,
                    centerY: 887,
                    radius: 879
                };
                document.body.appendChild(cam.canvas);
                cam.render();
                assert.ok(true);
                return [2];
            }
        });
    });
});
function sleep(ms) {
    return new Promise(function (resolve) {
        return setTimeout(resolve, ms);
    });
}
//# sourceMappingURL=data:application/json;base64,

